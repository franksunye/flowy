name: 🔄 Dependencies

on:
  schedule:
    # 每周一 UTC 9:00 检查依赖更新
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # 🔍 依赖检查
  dependency-check:
    name: 🔍 Check Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Check for outdated packages
      run: |
        echo "## 📦 Dependency Status Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 检查过时的包
        npm outdated --json > outdated.json 2>/dev/null || echo "{}" > outdated.json
        
        if [ "$(jq 'keys | length' outdated.json)" -gt "0" ]; then
          echo "### 🔄 Outdated Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Current | Wanted | Latest |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.wanted) | \(.value.latest) |"' outdated.json >> $GITHUB_STEP_SUMMARY
        else
          echo "### ✅ All Dependencies Up to Date" >> $GITHUB_STEP_SUMMARY
          echo "No outdated packages found!" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 🛡️ Security audit
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🛡️ Security Audit" >> $GITHUB_STEP_SUMMARY
        
        # 运行安全审计
        npm audit --json > audit.json 2>/dev/null || echo '{"vulnerabilities":{}}' > audit.json
        
        TOTAL_VULNS=$(jq '.vulnerabilities | keys | length' audit.json 2>/dev/null || echo "0")
        
        if [ "$TOTAL_VULNS" -gt "0" ]; then
          HIGH_VULNS=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' audit.json)
          MODERATE_VULNS=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "moderate")) | length' audit.json)
          LOW_VULNS=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "low")) | length' audit.json)
          
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| High | $HIGH_VULNS |" >> $GITHUB_STEP_SUMMARY
          echo "| Moderate | $MODERATE_VULNS |" >> $GITHUB_STEP_SUMMARY
          echo "| Low | $LOW_VULNS |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$HIGH_VULNS" -gt "0" ]; then
            echo "::error::Found $HIGH_VULNS high severity vulnerabilities"
          fi
        else
          echo "✅ No security vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📊 Dependency analysis
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Dependency Statistics" >> $GITHUB_STEP_SUMMARY
        
        # 统计依赖数量
        PROD_DEPS=$(jq -r '.dependencies // {} | keys | length' package.json)
        DEV_DEPS=$(jq -r '.devDependencies // {} | keys | length' package.json)
        TOTAL_DEPS=$((PROD_DEPS + DEV_DEPS))
        
        echo "- **Production dependencies**: $PROD_DEPS" >> $GITHUB_STEP_SUMMARY
        echo "- **Development dependencies**: $DEV_DEPS" >> $GITHUB_STEP_SUMMARY
        echo "- **Total dependencies**: $TOTAL_DEPS" >> $GITHUB_STEP_SUMMARY
        
        # 计算 node_modules 大小
        if [ -d "node_modules" ]; then
          NODE_MODULES_SIZE=$(du -sh node_modules | cut -f1)
          echo "- **node_modules size**: $NODE_MODULES_SIZE" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 💾 Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          outdated.json
          audit.json
        retention-days: 30

  # 🔄 自动更新依赖 (可选)
  auto-update:
    name: 🔄 Auto Update Dependencies
    runs-on: ubuntu-latest
    needs: dependency-check
    if: false  # 设置为 true 启用自动更新
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔄 Update dependencies
      run: |
        # 更新补丁版本
        npm update
        
        # 检查是否有变化
        if git diff --quiet package-lock.json; then
          echo "No dependency updates available"
          echo "has_updates=false" >> $GITHUB_ENV
        else
          echo "Dependencies updated"
          echo "has_updates=true" >> $GITHUB_ENV
        fi
        
    - name: 🧪 Test after update
      if: env.has_updates == 'true'
      run: |
        npm run test:unit
        npm run build
        
    - name: 📝 Create Pull Request
      if: env.has_updates == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: '🔄 chore: update dependencies'
        title: '🔄 Automated dependency updates'
        body: |
          ## 🔄 Automated Dependency Updates
          
          This PR contains automated dependency updates:
          
          ### Changes
          - Updated patch versions of dependencies
          - All tests pass after updates
          - Build verification completed
          
          ### Verification
          - ✅ Unit tests pass
          - ✅ Build succeeds
          - ✅ No breaking changes detected
          
          **Auto-generated by GitHub Actions**
        branch: chore/dependency-updates
        delete-branch: true
